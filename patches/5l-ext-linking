# HG changeset patch
# Parent ba5881e133249d1bf473a52f8835408238cc93fa

diff -r ba5881e13324 src/cmd/5l/5.out.h
--- a/src/cmd/5l/5.out.h	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/cmd/5l/5.out.h	Tue Aug 13 17:56:11 2013 +0200
@@ -273,7 +273,7 @@
 #define	D_PLT1		(D_NONE+44) // R_ARM_PLT32, 2nd inst: add ip, ip, #0xNN000
 #define	D_PLT2		(D_NONE+45) // R_ARM_PLT32, 3rd inst: ldr pc, [ip, #0xNNN]!
 #define	D_CALL		(D_NONE+46) // R_ARM_PLT32/R_ARM_CALL/R_ARM_JUMP24, bl xxxxx or b yyyyy
-#define	D_TLS		(D_NONE+47)
+#define	D_TLS		(D_NONE+47) // R_ARM_TLS_LE32
 
 /*
  * this is the ranlib header
diff -r ba5881e13324 src/cmd/5l/asm.c
--- a/src/cmd/5l/asm.c	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/cmd/5l/asm.c	Tue Aug 13 17:56:11 2013 +0200
@@ -264,6 +264,23 @@
 		else
 			return -1;
 		break;
+
+	case D_CALL:
+		if(r->siz == 4) {
+			if((r->add & 0xff000000) == 0xeb000000) // BL
+				LPUT(R_ARM_CALL | elfsym<<8);
+			else
+				LPUT(R_ARM_JUMP24 | elfsym<<8);
+		} else
+			return -1;
+		break;
+
+	case D_TLS:
+		if(r->siz == 4)
+			LPUT(R_ARM_TLS_LE32 | elfsym<<8);
+		else
+			return -1;
+		break;
 	}
 
 	return 0;
@@ -308,6 +325,34 @@
 int
 archreloc(Reloc *r, Sym *s, vlong *val)
 {
+	Sym *rs;
+
+	if(linkmode == LinkExternal) {
+		switch(r->type) {
+		case D_CALL:
+			r->done = 0;
+
+			// set up addend for eventual relocation via outer symbol.
+			rs = r->sym;
+			r->xadd = r->add;
+			if(r->xadd & 0x800000)
+				r->xadd |= ~0xffffff;
+			r->xadd *= 4;
+			while(rs->outer != nil) {
+				r->xadd += symaddr(rs) - symaddr(rs->outer);
+				rs = rs->outer;
+			}
+
+			if(rs->type != SHOSTOBJ && rs->sect == nil)
+				diag("missing section for %s", rs->name);
+			r->xsym = rs;
+
+			*val = braddoff((0xff000000U & (uint32)r->add), 
+							(0xffffff & (uint32)(r->xadd / 4)));
+			return 0;
+		}
+		return -1;
+	}
 	switch(r->type) {
 	case D_CONST:
 		*val = r->add;
@@ -766,7 +811,7 @@
 }
 
 void
-asmout(Prog *p, Optab *o, int32 *out)
+asmout(Prog *p, Optab *o, int32 *out, Sym *gmsym)
 {
 	int32 o1, o2, o3, o4, o5, o6, v;
 	int r, rf, rt, rt2;
@@ -849,11 +894,19 @@
 		break;
 
 	case 5:		/* bra s */
+		o1 = opbra(p->as, p->scond);
 		v = -8;
-		// TODO: Use addrel.
+		if(p->to.sym != S && p->to.sym->type != 0) {
+			rel = addrel(cursym);
+			rel->off = pc - cursym->value;
+			rel->siz = 4;
+			rel->sym = p->to.sym;
+			rel->add = o1 | ((v >> 2) & 0xffffff);
+			rel->type = D_CALL;
+			break;
+		}
 		if(p->cond != P)
 			v = (p->cond->pc - pc) - 8;
-		o1 = opbra(p->as, p->scond);
 		o1 |= (v >> 2) & 0xffffff;
 		break;
 
@@ -911,7 +964,11 @@
 			rel->siz = 4;
 			rel->sym = p->to.sym;
 			rel->add = p->to.offset;
-			if(flag_shared) {
+			if(rel->sym == gmsym) {
+				rel->type = D_TLS;
+				rel->xadd = rel->add;
+				rel->xsym = rel->sym;
+			} else if(flag_shared) {
 				rel->type = D_PCREL;
 				rel->add += pc - p->pcrel->pc - 8;
 			} else
@@ -1242,9 +1299,22 @@
 
 	case 63:	/* bcase */
 		if(p->cond != P) {
-			o1 = p->cond->pc;
-			if(flag_shared)
-				o1 = o1 - p->pcrel->pc - 16;
+			rel = addrel(cursym);
+			rel->off = pc - cursym->value;
+			rel->siz = 4;
+			if(p->to.sym != S && p->to.sym->type != 0) {
+				rel->sym = p->to.sym;
+				rel->add = p->to.offset;
+			} else {
+				rel->sym = cursym;
+				rel->add = p->cond->pc - cursym->value;
+			}
+			if(o->flag & LPCREL) {
+				rel->type = D_PCREL;
+				rel->add += pc - p->pcrel->pc - 16 + rel->siz;
+			} else
+				rel->type = D_ADDR;
+			o1 = 0;
 		}
 		break;
 
diff -r ba5881e13324 src/cmd/5l/l.h
--- a/src/cmd/5l/l.h	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/cmd/5l/l.h	Tue Aug 13 17:56:11 2013 +0200
@@ -364,7 +364,7 @@
 void	addhist(int32, int);
 Prog*	appendp(Prog*);
 void	asmb(void);
-void	asmout(Prog*, Optab*, int32*);
+void	asmout(Prog*, Optab*, int32*, Sym*);
 int32	atolwhex(char*);
 Prog*	brloop(Prog*);
 void	buildop(void);
diff -r ba5881e13324 src/cmd/5l/noop.c
--- a/src/cmd/5l/noop.c	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/cmd/5l/noop.c	Tue Aug 13 17:56:11 2013 +0200
@@ -60,7 +60,7 @@
 	int o;
 	int32 arg;
 	Prog *pmorestack;
-	Sym *symmorestack, *tlsfallback;
+	Sym *symmorestack, *tlsfallback, *gmsym;
 
 	/*
 	 * find leaf subroutines
@@ -83,6 +83,9 @@
 	pmorestack->reg |= NOSPLIT;
 
 	tlsfallback = lookup("runtime.read_tls_fallback", 0);
+	gmsym = S;
+	if(linkmode == LinkExternal)
+		gmsym = lookup("runtime.tlsgm", 0);
 	q = P;
 	for(cursym = textp; cursym != nil; cursym = cursym->next) {
 		for(p = cursym->text; p != P; p = p->link) {
@@ -165,6 +168,35 @@
 						p->to.offset = 0;
 						cursym->text->mark &= ~LEAF;
 					}
+					if(linkmode == LinkExternal) {
+						// runtime.tlsgm is relocated with R_ARM_TLS_LE32
+						// and $runtime.tlsgm will contain the TLS offset.
+						//
+						// MOV $runtime.tlsgm+tlsoffset(SB), REGTMP
+						// ADD REGTMP, <reg>
+						q = p;
+						p = appendp(p);
+						p->as = AMOVW;
+						p->scond = 14;
+						p->reg = NREG;
+						p->from.type = D_CONST;
+						p->from.sym = gmsym;
+						p->from.name = D_EXTERN;
+						p->from.offset = tlsoffset;
+						p->to.type = D_REG;
+						p->to.reg = REGTMP;
+						p->to.offset = 0;
+
+						p = appendp(p);
+						p->as = AADD;
+						p->scond = 14;
+						p->reg = NREG;
+						p->from.type = D_REG;
+						p->from.reg = REGTMP;
+						p->to.type = D_REG;
+						p->to.reg = (q->to.offset & 0xf000) >> 12;
+						p->to.offset = 0;
+					}
 				}
 			}
 			q = p;
diff -r ba5881e13324 src/cmd/5l/obj.c
--- a/src/cmd/5l/obj.c	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/cmd/5l/obj.c	Tue Aug 13 17:56:11 2013 +0200
@@ -82,7 +82,7 @@
 	INITRND = -1;
 	INITENTRY = 0;
 	LIBINITENTRY = 0;
-	linkmode = LinkInternal; // TODO: LinkAuto once everything works.
+	linkmode = LinkAuto;
 	nuxiinit();
 	
 	p = getgoarm();
@@ -131,29 +131,35 @@
 	flagcount("v", "print link trace", &debug['v']);
 	flagcount("w", "disable DWARF generation", &debug['w']);
 	flagcount("shared", "generate shared object", &flag_shared);
-	// TODO: link mode flag
 	
 	flagparse(&argc, &argv, usage);
 
 	if(argc != 1)
 		usage();
 
+	mywhatsys();
+
+	if(HEADTYPE == -1)
+		HEADTYPE = headtype(goos);
+
 	// getgoextlinkenabled is based on GO_EXTLINK_ENABLED when
 	// Go was built; see ../../make.bash.
 	if(linkmode == LinkAuto && strcmp(getgoextlinkenabled(), "0") == 0)
 		linkmode = LinkInternal;
 
-	if(linkmode == LinkExternal) {
-		diag("only -linkmode=internal is supported");
-		errorexit();
-	} else if(linkmode == LinkAuto) {
-		linkmode = LinkInternal;
+	switch(HEADTYPE) {
+	default:
+		if(linkmode == LinkAuto)
+			linkmode = LinkInternal;
+		if(linkmode == LinkExternal && strcmp(getgoextlinkenabled(), "1") != 0)
+			sysfatal("cannot use -linkmode=external with -H %s", headstr(HEADTYPE));
+		break;
+	case Hlinux:
+		break;
 	}
 
 	libinit();
 
-	if(HEADTYPE == -1)
-		HEADTYPE = headtype(goos);
 	switch(HEADTYPE) {
 	default:
 		diag("unknown -H option");
diff -r ba5881e13324 src/cmd/5l/optab.c
--- a/src/cmd/5l/optab.c	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/cmd/5l/optab.c	Tue Aug 13 17:56:11 2013 +0200
@@ -191,7 +191,7 @@
 	{ AMOVBU,	C_REG,	C_NONE,	C_SHIFT,	61, 4, 0 },
 
 	{ ACASE,	C_REG,	C_NONE,	C_NONE,		62, 4, 0, LPCREL, 8 },
-	{ ABCASE,	C_NONE, C_NONE, C_SBRA,		63, 4, 0 },
+	{ ABCASE,	C_NONE, C_NONE, C_SBRA,		63, 4, 0, LPCREL, 0 },
 
 	{ AMOVH,	C_REG,	C_NONE, C_HAUTO,	70, 4, REGSP,	0 },
 	{ AMOVH,	C_REG,	C_NONE,	C_HOREG,	70, 4, 0,	0 },
diff -r ba5881e13324 src/cmd/5l/span.c
--- a/src/cmd/5l/span.c	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/cmd/5l/span.c	Tue Aug 13 17:56:11 2013 +0200
@@ -90,7 +90,7 @@
 	int32 c, otxt, out[6];
 	Section *sect;
 	uchar *bp;
-	Sym *sub;
+	Sym *sub, *gmsym;
 
 	if(debug['v'])
 		Bprint(&bso, "%5.2f span\n", cputime());
@@ -237,6 +237,9 @@
 	 * code references to be relocated too, and then
 	 * perhaps we'd be able to parallelize the span loop above.
 	 */
+	gmsym = S;
+	if(linkmode == LinkExternal)
+		gmsym = lookup("runtime.tlsgm", 0);
 	for(cursym = textp; cursym != nil; cursym = cursym->next) {
 		p = cursym->text;
 		if(p == P || p->link == P)
@@ -249,7 +252,7 @@
 			pc = p->pc;
 			curp = p;
 			o = oplook(p);
-			asmout(p, o, out);
+			asmout(p, o, out, gmsym);
 			for(i=0; i<o->size/4; i++) {
 				v = out[i];
 				*bp++ = v;
diff -r ba5881e13324 src/cmd/8l/asm.c
--- a/src/cmd/8l/asm.c	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/cmd/8l/asm.c	Tue Aug 13 17:56:11 2013 +0200
@@ -366,6 +366,8 @@
 archreloc(Reloc *r, Sym *s, vlong *val)
 {
 	USED(s);
+	if(linkmode == LinkExternal)
+		return -1;
 	switch(r->type) {
 	case D_CONST:
 		*val = r->add;
diff -r ba5881e13324 src/cmd/ld/data.c
--- a/src/cmd/ld/data.c	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/cmd/ld/data.c	Tue Aug 13 17:56:11 2013 +0200
@@ -178,7 +178,7 @@
 		switch(r->type) {
 		default:
 			o = 0;
-			if(linkmode == LinkExternal || archreloc(r, s, &o) < 0)
+			if(archreloc(r, s, &o) < 0)
 				diag("unknown reloc %d", r->type);
 			break;
 		case D_TLS:
diff -r ba5881e13324 src/cmd/ld/elf.h
--- a/src/cmd/ld/elf.h	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/cmd/ld/elf.h	Tue Aug 13 17:56:11 2013 +0200
@@ -569,6 +569,7 @@
 #define	R_ARM_GOT_PREL		96
 #define	R_ARM_GNU_VTENTRY	100
 #define	R_ARM_GNU_VTINHERIT	101
+#define	R_ARM_TLS_LE32		108
 #define	R_ARM_RSBREL32		250
 #define	R_ARM_THM_RPC22		251
 #define	R_ARM_RREL32		252
@@ -576,7 +577,7 @@
 #define	R_ARM_RPC24		254
 #define	R_ARM_RBASE		255
 
-#define	R_ARM_COUNT		37	/* Count of defined relocation types. */
+#define	R_ARM_COUNT		38	/* Count of defined relocation types. */
 
 
 #define	R_386_NONE	0	/* No relocation. */
diff -r ba5881e13324 src/cmd/ld/lib.c
--- a/src/cmd/ld/lib.c	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/cmd/ld/lib.c	Tue Aug 13 17:56:11 2013 +0200
@@ -688,7 +688,7 @@
 		argv[argc++] = "-m64";
 		break;
 	case '5':
-		// nothing required for arm
+		argv[argc++] = "-marm";
 		break;
 	}
 	if(!debug['s'] && !debug_s) {
diff -r ba5881e13324 src/pkg/runtime/asm_arm.s
--- a/src/pkg/runtime/asm_arm.s	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/pkg/runtime/asm_arm.s	Tue Aug 13 17:56:11 2013 +0200
@@ -13,7 +13,7 @@
 	// copy arguments forward on an even stack
 	// use R13 instead of SP to avoid linker rewriting the offsets
 	MOVW	0(R13), R0		// argc
-	MOVW	$4(R13), R1		// argv
+	MOVW	4(R13), R1		// argv
 	SUB	$64, R13		// plenty of scratch
 	AND	$~7, R13
 	MOVW	R0, 60(R13)		// save argc, argv away
diff -r ba5881e13324 src/pkg/runtime/os_linux_arm.c
--- a/src/pkg/runtime/os_linux_arm.c	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/pkg/runtime/os_linux_arm.c	Tue Aug 13 17:56:11 2013 +0200
@@ -35,16 +35,13 @@
 
 #pragma textflag NOSPLIT
 void
-runtime·setup_auxv(int32 argc, void *argv_list)
+runtime·setup_auxv(int32 argc, byte **argv)
 {
-	byte **argv;
 	byte **envp;
 	byte *rnd;
 	uint32 *auxv;
 	uint32 t;
 
-	argv = &argv_list;
-
 	// skip envp to get to ELF auxiliary vector.
 	for(envp = &argv[argc+1]; *envp != nil; envp++)
 		;
diff -r ba5881e13324 src/pkg/runtime/rt0_freebsd_arm.s
--- a/src/pkg/runtime/rt0_freebsd_arm.s	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/pkg/runtime/rt0_freebsd_arm.s	Tue Aug 13 17:56:11 2013 +0200
@@ -7,4 +7,7 @@
 // FreeBSD and Linux use the same linkage to main
 
 TEXT _rt0_arm_freebsd(SB),NOSPLIT,$-4
+	MOVW	(R13), R0	// argc
+	MOVW	$4(R13), R1		// argv
+	MOVM.DB.W [R0-R1], (R13)
 	B	_rt0_go(SB)
diff -r ba5881e13324 src/pkg/runtime/rt0_linux_arm.s
--- a/src/pkg/runtime/rt0_linux_arm.s	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/pkg/runtime/rt0_linux_arm.s	Tue Aug 13 17:56:11 2013 +0200
@@ -5,6 +5,12 @@
 #include "../../cmd/ld/textflag.h"
 
 TEXT _rt0_arm_linux(SB),NOSPLIT,$-4
+	MOVW	(R13), R0	// argc
+	MOVW	$4(R13), R1		// argv
+	MOVW	$_rt0_arm_linux1(SB), R4
+	B		(R4)
+
+TEXT _rt0_arm_linux1(SB),NOSPLIT,$-4
 	// We first need to detect the kernel ABI, and warn the user
 	// if the system only supports OABI
 	// The strategy here is to call some EABI syscall to see if
@@ -14,6 +20,8 @@
 	// we don't know the kernel ABI... Oh, not really, we can do
 	// syscall in Thumb mode.
 
+	// Save argc and argv
+	MOVM.DB.W [R0-R1], (R13)
 	// set up sa_handler
 	MOVW	$bad_abi<>(SB), R0 // sa_handler
 	MOVW	$0, R1 // sa_flags
@@ -72,3 +80,7 @@
 	// TODO(minux): only supports little-endian CPUs
 	WORD $0x4770df01 // swi $1; bx lr
 
+TEXT main(SB),NOSPLIT,$-8
+	MOVW	$_rt0_arm_linux1(SB), R4
+	B		(R4)
+
diff -r ba5881e13324 src/pkg/runtime/rt0_netbsd_arm.s
--- a/src/pkg/runtime/rt0_netbsd_arm.s	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/pkg/runtime/rt0_netbsd_arm.s	Tue Aug 13 17:56:11 2013 +0200
@@ -7,4 +7,7 @@
 // FreeBSD/NetBSD and Linux use the same linkage to main
 
 TEXT _rt0_arm_netbsd(SB),NOSPLIT,$-4
+	MOVW	(R13), R0	// argc
+	MOVW	$4(R13), R1		// argv
+	MOVM.DB.W [R0-R1], (R13)
 	B _rt0_go(SB)
diff -r ba5881e13324 src/run.bash
--- a/src/run.bash	Tue Aug 13 17:50:31 2013 +0200
+++ b/src/run.bash	Tue Aug 13 17:56:11 2013 +0200
@@ -118,7 +118,7 @@
 	*) go test -ldflags '-linkmode=external'  || exit 1;;
 	esac
 	;;
-freebsd-386 | freebsd-amd64 | linux-386 | linux-amd64 | netbsd-386 | netbsd-amd64)
+freebsd-386 | freebsd-amd64 | linux-386 | linux-amd64 | linux-arm | netbsd-386 | netbsd-amd64)
 	go test -ldflags '-linkmode=external' || exit 1
 	go test -ldflags '-linkmode=auto' ../testtls || exit 1
 	go test -ldflags '-linkmode=external' ../testtls || exit 1
