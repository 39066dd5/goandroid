# HG changeset patch
# Parent 6294f3ca30e15705a4fbc14e0f07af848d782318

diff -r 6294f3ca30e1 src/cmd/5l/noop.c
--- a/src/cmd/5l/noop.c	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/cmd/5l/noop.c	Tue Aug 06 12:02:10 2013 +0200
@@ -60,13 +60,14 @@
 	int o;
 	int32 arg;
 	Prog *pmorestack;
-	Sym *symmorestack;
+	Sym *symmorestack, *tlsfallback;
 
 	/*
 	 * find leaf subroutines
 	 * strip NOPs
 	 * expand RET
 	 * expand BECOME pseudo
+	 * fixup TLS
 	 */
 
 	if(debug['v'])
@@ -81,6 +82,7 @@
 	pmorestack = symmorestack->text;
 	pmorestack->reg |= NOSPLIT;
 
+	tlsfallback = lookup("runtime.read_tls_fallback", 0);
 	q = P;
 	for(cursym = textp; cursym != nil; cursym = cursym->next) {
 		for(p = cursym->text; p != P; p = p->link) {
@@ -145,6 +147,25 @@
 					}
 				}
 				break;
+			case AWORD:
+				// Rewrite TLS register fetch: MRC 15, 0, <reg>, C13, C0, 3
+				if((p->to.offset & 0xffff0fff) == 0xee1d0f70) {
+					if(HEADTYPE == Hopenbsd) {
+						p->as = ARET;
+					} else if(goarm < 7) {
+						if(tlsfallback->type != STEXT) {
+							diag("runtime·read_tls_fallback not defined");
+							errorexit();
+						}
+						// BL runtime.read_tls_fallback(SB)
+						p->as = ABL;
+						p->to.type = D_BRANCH;
+						p->to.sym = tlsfallback;
+						p->cond = tlsfallback->text;
+						p->to.offset = 0;
+						cursym->text->mark &= ~LEAF;
+					}
+				}
 			}
 			q = p;
 		}
diff -r 6294f3ca30e1 src/cmd/5l/obj.c
--- a/src/cmd/5l/obj.c	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/cmd/5l/obj.c	Tue Aug 06 12:02:10 2013 +0200
@@ -208,7 +208,7 @@
 	case Hnetbsd:
 		debug['d'] = 0;	// with dynamic linking
 		tlsoffset = -8; // hardcoded number, first 4-byte word for g, and then 4-byte word for m
-		                // this number is known to ../../pkg/runtime/cgo/gcc_linux_arm.c
+		                // this number is known to ../../pkg/runtime/rt0_*_arm.s
 		elfinit();
 		HEADR = ELFRESERVE;
 		if(INITTEXT == -1)
@@ -253,6 +253,7 @@
 	// mark some functions that are only referenced after linker code editing
 	if(debug['F'])
 		mark(rlookup("_sfloat", 0));
+	mark(lookup("runtime.read_tls_fallback", 0));
 	deadcode();
 	if(textp == nil) {
 		diag("no code");
diff -r 6294f3ca30e1 src/cmd/6l/span.c
--- a/src/cmd/6l/span.c	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/cmd/6l/span.c	Tue Aug 06 12:02:10 2013 +0200
@@ -888,18 +888,11 @@
 		
 		r = addrel(cursym);
 		r->off = curp->pc + andptr - and;
-		r->add = 0;
-		r->xadd = 0;
+		r->add = a->offset-tlsoffset;
+		r->xadd = r->add;
 		r->siz = 4;
 		r->type = D_TLS;
-		if(a->offset == tlsoffset+0)
-			s = lookup("runtime.g", 0);
-		else
-			s = lookup("runtime.m", 0);
-		s->type = STLSBSS;
-		s->reachable = 1;
-		s->size = PtrSize;
-		s->hide = 1;
+		s = lookup("runtime.tlsgm", 0);
 		r->sym = s;
 		r->xsym = s;
 		v = 0;
diff -r 6294f3ca30e1 src/cmd/8l/span.c
--- a/src/cmd/8l/span.c	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/cmd/8l/span.c	Tue Aug 06 12:02:10 2013 +0200
@@ -695,18 +695,11 @@
 
 		r = addrel(cursym);
 		r->off = curp->pc + andptr - and;
-		r->add = 0;
-		r->xadd = 0;
+		r->add = a->offset-tlsoffset;
+		r->xadd = r->add;
 		r->siz = 4;
 		r->type = D_TLS;
-		if(a->offset == tlsoffset+0)
-			s = lookup("runtime.g", 0);
-		else
-			s = lookup("runtime.m", 0);
-		s->type = STLSBSS;
-		s->reachable = 1;
-		s->hide = 1;
-		s->size = PtrSize;
+		s = lookup("runtime.tlsgm", 0);
 		r->sym = s;
 		r->xsym = s;
 		v = 0;
diff -r 6294f3ca30e1 src/cmd/ld/data.c
--- a/src/cmd/ld/data.c	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/cmd/ld/data.c	Tue Aug 06 12:02:10 2013 +0200
@@ -184,6 +184,8 @@
 		case D_TLS:
 			r->done = 0;
 			o = 0;
+			if(thechar != '6')
+				o = r->add;
 			break;
 		case D_ADDR:
 			if(linkmode == LinkExternal && r->sym->type != SCONST) {
diff -r 6294f3ca30e1 src/cmd/ld/lib.c
--- a/src/cmd/ld/lib.c	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/cmd/ld/lib.c	Tue Aug 06 12:02:10 2013 +0200
@@ -308,7 +308,7 @@
 loadlib(void)
 {
 	int i, w, x;
-	Sym *s;
+	Sym *s, *gmsym;
 
 	loadinternal("runtime");
 	if(thechar == '5')
@@ -357,6 +357,12 @@
 				} else
 					s->type = 0;
 			}
+	} else if(linkmode == LinkExternal) {
+		gmsym = lookup("runtime.tlsgm", 0);
+		gmsym->type = STLSBSS;
+		gmsym->size = 2*PtrSize;
+		gmsym->hide = 1;
+		gmsym->reachable = 1;
 	}
 	
 	// Now that we know the link mode, trim the dynexp list.
diff -r 6294f3ca30e1 src/cmd/ld/symtab.c
--- a/src/cmd/ld/symtab.c	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/cmd/ld/symtab.c	Tue Aug 06 12:02:10 2013 +0200
@@ -181,22 +181,13 @@
 	genasmsym(putelfsym);
 	
 	if(linkmode == LinkExternal && HEADTYPE != Hopenbsd) {
-		s = lookup("runtime.m", 0);
+		s = lookup("runtime.tlsgm", 0);
 		if(s->sect == nil) {
 			cursym = nil;
 			diag("missing section for %s", s->name);
 			errorexit();
 		}
-		putelfsyment(putelfstr(s->name), 0, PtrSize, (STB_LOCAL<<4)|STT_TLS, s->sect->elfsect->shnum, 0);
-		s->elfsym = numelfsym++;
-
-		s = lookup("runtime.g", 0);
-		if(s->sect == nil) {
-			cursym = nil;
-			diag("missing section for %s", s->name);
-			errorexit();
-		}
-		putelfsyment(putelfstr(s->name), PtrSize, PtrSize, (STB_LOCAL<<4)|STT_TLS, s->sect->elfsect->shnum, 0);
+		putelfsyment(putelfstr(s->name), 0, 2*PtrSize, (STB_LOCAL<<4)|STT_TLS, s->sect->elfsect->shnum, 0);
 		s->elfsym = numelfsym++;
 	}
 
diff -r 6294f3ca30e1 src/pkg/runtime/asm_arm.s
--- a/src/pkg/runtime/asm_arm.s	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/pkg/runtime/asm_arm.s	Tue Aug 06 12:02:10 2013 +0200
@@ -34,10 +34,15 @@
 	BL	runtime·emptyfunc(SB)	// fault if stack check is wrong
 
 	// if there is an _cgo_init, call it.
-	MOVW	_cgo_init(SB), R2
-	CMP	$0, R2
-	MOVW.NE	g, R0 // first argument of _cgo_init is g
-	BL.NE	(R2) // will clobber R0-R3
+	MOVW	_cgo_init(SB), R4
+	CMP	$0, R4
+	B.EQ	nocgo
+	BL		runtime·save_gm(SB);
+	MOVW	g, R0 // first argument of _cgo_init is g
+	MOVW	$setmg_gcc<>(SB), R1 // second argument is address of save_gm
+	BL		(R4) // will clobber R0-R3
+
+nocgo:
 	// update stackguard after _cgo_init
 	MOVW	g_stackguard0(g), R0
 	MOVW	R0, g_stackguard(g)
@@ -118,9 +123,9 @@
 	MOVW	0(FP), R1		// gobuf
 	MOVW	gobuf_g(R1), g
 	MOVW	0(g), R2		// make sure g != nil
-	MOVW	_cgo_save_gm(SB), R2
+	MOVB	runtime·iscgo(SB), R2
 	CMP 	$0, R2 // if in Cgo, we have to save g and m
-	BL.NE	(R2) // this call will clobber R0
+	BL.NE	runtime·save_gm(SB) // this call will clobber R0
 	MOVW	gobuf_sp(R1), SP	// restore SP
 	MOVW	gobuf_lr(R1), LR
 	MOVW	gobuf_ret(R1), R0
@@ -436,9 +441,9 @@
 // See cgocall.c for more details.
 TEXT	runtime·cgocallback_gofunc(SB),7,$8-12
 	// Load m and g from thread-local storage.
-	MOVW	_cgo_load_gm(SB), R0
+	MOVB	runtime·iscgo(SB), R0
 	CMP	$0, R0
-	BL.NE	(R0)
+	BL.NE	runtime·load_gm(SB)
 
 	// If m is nil, Go did not create the current thread.
 	// Call needm to obtain one for temporary use.
@@ -518,9 +523,9 @@
 	MOVW	gg+4(FP), g
 
 	// Save m and g to thread-local storage.
-	MOVW	_cgo_save_gm(SB), R0
+	MOVB	runtime·iscgo(SB), R0
 	CMP	$0, R0
-	BL.NE	(R0)
+	BL.NE	runtime·save_gm(SB)
 
 	RET
 
@@ -614,6 +619,34 @@
 	MOVW	$0, R0
 	RET
 
+// We have to resort to TLS variable to save g(R10) and
+// m(R9). One reason is that external code might trigger
+// SIGSEGV, and our runtime.sigtramp don't even know we
+// are in external code, and will continue to use R10/R9,
+// this might as well result in another SIGSEGV.
+// Note: all three functions will clobber R0, and the last
+// two can be called from 5c ABI code.
+
+// g (R10) at 8(TP), m (R9) at 12(TP)
+TEXT runtime·save_gm(SB),7,$0
+	MRC		15, 0, R0, C13, C0, 3 // Fetch TLS register
+	MOVW	g, 8(R0)
+	MOVW	m, 12(R0)
+	RET
+
+TEXT runtime·load_gm(SB),7,$0
+	MRC		15, 0, R0, C13, C0, 3 // Fetch TLS register
+	MOVW	8(R0), g
+	MOVW	12(R0), m
+	RET
+
+// void setmg_gcc(M*, G*); set m and g called from gcc.
+TEXT setmg_gcc<>(SB),7,$0
+	MOVW	R0, m
+	MOVW	R1, g
+	B		runtime·save_gm(SB)
+
+
 // TODO: share code with memeq?
 TEXT bytes·Equal(SB),7,$0
 	MOVW	a_len+4(FP), R1
diff -r 6294f3ca30e1 src/pkg/runtime/cgo/asm_arm.s
--- a/src/pkg/runtime/cgo/asm_arm.s	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/pkg/runtime/cgo/asm_arm.s	Tue Aug 06 12:02:10 2013 +0200
@@ -12,12 +12,11 @@
 	 *  push 2 args for fn (R1 and R2).
 	 * Also note that at procedure entry in 5c/5g world, 4(R13) will be the
 	 *  first arg, so we must push another dummy reg (R0) for 0(R13).
-	 *  Additionally, cgo_tls_set_gm will clobber R0, so we need to save R0
+	 *  Additionally, runtime·load_gm will clobber R0, so we need to save R0
 	 *  nevertheless.
 	 */
 	MOVM.WP	[R0, R1, R2, R4, R5, R6, R7, R8, m, g, R11, R12, R14], (R13)
-	MOVW	_cgo_load_gm(SB), R0
-	BL	(R0)
+	BL	runtime·load_gm(SB)
 	MOVW	PC, R14
 	MOVW	0(R13), PC
 	MOVM.IAW	(R13), [R0, R1, R2, R4, R5, R6, R7, R8, m, g, R11, R12, PC]
diff -r 6294f3ca30e1 src/pkg/runtime/cgo/cgo_arm.c
--- a/src/pkg/runtime/cgo/cgo_arm.c	Tue Aug 06 16:48:19 2013 +1000
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,12 +0,0 @@
-// Copyright 2013 The Go Authors.  All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-#pragma cgo_import_static x_cgo_load_gm
-extern void x_cgo_load_gm(void);
-void (*_cgo_load_gm)(void) = x_cgo_load_gm;
-
-#pragma cgo_import_static x_cgo_save_gm
-extern void x_cgo_save_gm(void);
-void (*_cgo_save_gm)(void) = x_cgo_save_gm;
-
diff -r 6294f3ca30e1 src/pkg/runtime/cgo/gcc_arm.S
--- a/src/pkg/runtime/cgo/gcc_arm.S	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/pkg/runtime/cgo/gcc_arm.S	Tue Aug 06 12:02:10 2013 +0200
@@ -21,12 +21,8 @@
 .globl EXT(crosscall_arm2)
 EXT(crosscall_arm2):
 	push {r4, r5, r6, r7, r8, r9, r10, r11, ip, lr}
-	mov r10, r1 // g
-	mov r9, r2 // m
-	mov r3, r0 // save r0, cgo_tls_set_gm will clobber it
-	bl EXT(x_cgo_save_gm) // save current g and m into TLS variable
 	mov lr, pc
-	mov pc, r3
+	mov pc, r0
 	pop {r4, r5, r6, r7, r8, r9, r10, r11, ip, pc}
 
 .globl EXT(__stack_chk_fail_local)
diff -r 6294f3ca30e1 src/pkg/runtime/cgo/gcc_freebsd_arm.c
--- a/src/pkg/runtime/cgo/gcc_freebsd_arm.c	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/pkg/runtime/cgo/gcc_freebsd_arm.c	Tue Aug 06 12:02:10 2013 +0200
@@ -8,72 +8,26 @@
 #include <string.h>
 #include "libcgo.h"
 
-static void *threadentry(void*);
-
-// We have to resort to TLS variable to save g(R10) and
-// m(R9). One reason is that external code might trigger
-// SIGSEGV, and our runtime.sigtramp don't even know we
-// are in external code, and will continue to use R10/R9,
-// this might as well result in another SIGSEGV.
-// Note: all three functions will clobber R0, and the last
-// two can be called from 5c ABI code.
-void __aeabi_read_tp(void) __attribute__((naked));
-void x_cgo_save_gm(void) __attribute__((naked));
-void x_cgo_load_gm(void) __attribute__((naked));
-
-void
-__aeabi_read_tp(void)
-{
-	__asm__ __volatile__ (
 #ifdef ARM_TP_ADDRESS
-		// ARM_TP_ADDRESS is (ARM_VECTORS_HIGH + 0x1000) or 0xffff1000
-		// GCC inline asm doesn't provide a way to provide a constant
-		// to "ldr r0, =??" pseudo instruction, so we hardcode the value
-		// and check it with cpp.
+// ARM_TP_ADDRESS is (ARM_VECTORS_HIGH + 0x1000) or 0xffff1000
+// and is known to runtime.read_tls_fallback. Verify it with
+// cpp.
 #if ARM_TP_ADDRESS != 0xffff1000
 #error Wrong ARM_TP_ADDRESS!
 #endif
-		"ldr r0, =0xffff1000\n\t"
-		"ldr r0, [r0]\n\t"
-#else
-		"mrc p15, 0, r0, c13, c0, 3\n\t"
 #endif
-		"mov pc, lr\n\t"
-	);
-}
 
-// g (R10) at 8(TP), m (R9) at 12(TP)
-void
-x_cgo_load_gm(void)
-{
-	__asm__ __volatile__ (
-		"push {lr}\n\t"
-		"bl __aeabi_read_tp\n\t"
-		"ldr r10, [r0, #8]\n\t"
-		"ldr r9, [r0, #12]\n\t"
-		"pop {pc}\n\t"
-	);
-}
+static void *threadentry(void*);
+
+static void (*setmg_gcc)(void*, void*);
 
 void
-x_cgo_save_gm(void)
-{
-	__asm__ __volatile__ (
-		"push {lr}\n\t"
-		"bl __aeabi_read_tp\n\t"
-		"str r10, [r0, #8]\n\t"
-		"str r9, [r0, #12]\n\t"
-		"pop {pc}\n\t"
-	);
-}
-
-void
-x_cgo_init(G *g)
+x_cgo_init(G *g, void (*setmg)(void*, void*))
 {
 	pthread_attr_t attr;
 	size_t size;
-	x_cgo_save_gm(); // save g and m for the initial thread
 
+	setmg_gcc = setmg;
 	pthread_attr_init(&attr);
 	pthread_attr_getstacksize(&attr, &size);
 	g->stackguard = (uintptr)&attr - size + 4096;
@@ -121,6 +75,8 @@
 	 */
 	ts.g->stackguard = (uintptr)&ts - ts.g->stackguard + 4096 * 2;
 
-	crosscall_arm2(ts.fn, (void *)ts.g, (void *)ts.m);
+	setmg_gcc((void*)ts.m, (void*)ts.g);
+
+	crosscall_arm2(ts.fn);
 	return nil;
 }
diff -r 6294f3ca30e1 src/pkg/runtime/cgo/gcc_linux_arm.c
--- a/src/pkg/runtime/cgo/gcc_linux_arm.c	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/pkg/runtime/cgo/gcc_linux_arm.c	Tue Aug 06 12:02:10 2013 +0200
@@ -8,60 +8,15 @@
 
 static void *threadentry(void*);
 
-// We have to resort to TLS variable to save g(R10) and
-// m(R9). One reason is that external code might trigger
-// SIGSEGV, and our runtime.sigtramp don't even know we
-// are in external code, and will continue to use R10/R9,
-// this might as well result in another SIGSEGV.
-// Note: all three functions will clobber R0, and the last
-// two can be called from 5c ABI code.
-void __aeabi_read_tp(void) __attribute__((naked));
-void x_cgo_save_gm(void) __attribute__((naked));
-void x_cgo_load_gm(void) __attribute__((naked));
+static void (*setmg_gcc)(void*, void*);
 
 void
-__aeabi_read_tp(void)
-{
-	// b __kuser_get_tls @ 0xffff0fe0
-	__asm__ __volatile__ (
-		"mvn r0, #0xf000\n\t"
-		"sub pc, r0, #31\n\t"
-		"nop\n\tnop\n\t"
-	);
-}
-
-// g (R10) at 8(TP), m (R9) at 12(TP)
-void
-x_cgo_load_gm(void)
-{
-	__asm__ __volatile__ (
-		"push {lr}\n\t"
-		"bl __aeabi_read_tp\n\t"
-		"ldr r10, [r0, #8]\n\t"
-		"ldr r9, [r0, #12]\n\t"
-		"pop {pc}\n\t"
-	);
-}
-
-void
-x_cgo_save_gm(void)
-{
-	__asm__ __volatile__ (
-		"push {lr}\n\t"
-		"bl __aeabi_read_tp\n\t"
-		"str r10, [r0, #8]\n\t"
-		"str r9, [r0, #12]\n\t"
-		"pop {pc}\n\t"
-	);
-}
-
-void
-x_cgo_init(G *g)
+x_cgo_init(G *g, void (*setmg)(void*, void*))
 {
 	pthread_attr_t attr;
 	size_t size;
-	x_cgo_save_gm(); // save g and m for the initial thread
 
+	setmg_gcc = setmg;
 	pthread_attr_init(&attr);
 	pthread_attr_getstacksize(&attr, &size);
 	g->stackguard = (uintptr)&attr - size + 4096;
@@ -92,7 +47,7 @@
 	}
 }
 
-extern void crosscall_arm2(void (*fn)(void), void *g, void *m);
+extern void crosscall_arm2(void (*fn)(void));
 static void*
 threadentry(void *v)
 {
@@ -109,6 +64,8 @@
 	 */
 	ts.g->stackguard = (uintptr)&ts - ts.g->stackguard + 4096 * 2;
 
-	crosscall_arm2(ts.fn, (void *)ts.g, (void *)ts.m);
+	setmg_gcc((void*)ts.m, (void*)ts.g);
+
+	crosscall_arm2(ts.fn);
 	return nil;
 }
diff -r 6294f3ca30e1 src/pkg/runtime/cgo/gcc_netbsd_arm.c
--- a/src/pkg/runtime/cgo/gcc_netbsd_arm.c	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/pkg/runtime/cgo/gcc_netbsd_arm.c	Tue Aug 06 12:02:10 2013 +0200
@@ -10,64 +10,15 @@
 
 static void *threadentry(void*);
 
-// We have to resort to TLS variable to save g(R10) and
-// m(R9). One reason is that external code might trigger
-// SIGSEGV, and our runtime.sigtramp don't even know we
-// are in external code, and will continue to use R10/R9,
-// this might as well result in another SIGSEGV.
-// Note: all three functions will clobber R0, and the last
-// two can be called from 5c ABI code.
-void __aeabi_read_tp(void) __attribute__((naked));
-void x_cgo_save_gm(void) __attribute__((naked));
-void x_cgo_load_gm(void) __attribute__((naked));
+static void (*setmg_gcc)(void*, void*);
 
 void
-__aeabi_read_tp(void)
-{
-	// this function is only allowed to clobber r0
-	__asm__ __volatile__ (
-		"mrc p15, 0, r0, c13, c0, 3\n\t"
-		"cmp r0, #0\n\t"
-		"movne pc, lr\n\t"
-		"push {r1,r2,r3,r12}\n\t"
-		"svc 0x00a0013c\n\t" // _lwp_getprivate
-		"pop {r1,r2,r3,r12}\n\t"
-		"mov pc, lr\n\t"
-	);
-}
-
-// g (R10) at 8(TP), m (R9) at 12(TP)
-void
-x_cgo_load_gm(void)
-{
-	__asm__ __volatile__ (
-		"push {lr}\n\t"
-		"bl __aeabi_read_tp\n\t"
-		"ldr r10, [r0, #8]\n\t"
-		"ldr r9, [r0, #12]\n\t"
-		"pop {pc}\n\t"
-	);
-}
-
-void
-x_cgo_save_gm(void)
-{
-	__asm__ __volatile__ (
-		"push {lr}\n\t"
-		"bl __aeabi_read_tp\n\t"
-		"str r10, [r0, #8]\n\t"
-		"str r9, [r0, #12]\n\t"
-		"pop {pc}\n\t"
-	);
-}
-
-void
-x_cgo_init(G *g)
+x_cgo_init(G *g, void (*setmg)(void*, void*))
 {
 	pthread_attr_t attr;
 	size_t size;
-	x_cgo_save_gm(); // save g and m for the initial thread
 
+	setmg_gcc = setmg;
 	pthread_attr_init(&attr);
 	pthread_attr_getstacksize(&attr, &size);
 	g->stackguard = (uintptr)&attr - size + 4096;
@@ -117,6 +68,8 @@
 	 */
 	ts.g->stackguard = (uintptr)&ts - ts.g->stackguard + 4096 * 2;
 
-	crosscall_arm2(ts.fn, (void *)ts.g, (void *)ts.m);
+	setmg_gcc((void*)ts.m, (void*)ts.g);
+
+	crosscall_arm2(ts.fn);
 	return nil;
 }
diff -r 6294f3ca30e1 src/pkg/runtime/cgocall.c
--- a/src/pkg/runtime/cgocall.c	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/pkg/runtime/cgocall.c	Tue Aug 06 12:02:10 2013 +0200
@@ -86,11 +86,6 @@
 void *_cgo_init;	/* filled in by dynamic linker when Cgo is available */
 static int64 cgosync;  /* represents possible synchronization in C code */
 
-// These two are only used by the architecture where TLS based storage isn't
-// the default for g and m (e.g., ARM)
-void *_cgo_load_gm; /* filled in by dynamic linker when Cgo is available */
-void *_cgo_save_gm; /* filled in by dynamic linker when Cgo is available */
-
 static void unwindm(void);
 
 // Call from Go to C.
diff -r 6294f3ca30e1 src/pkg/runtime/sys_freebsd_arm.s
--- a/src/pkg/runtime/sys_freebsd_arm.s	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/pkg/runtime/sys_freebsd_arm.s	Tue Aug 06 12:02:10 2013 +0200
@@ -281,3 +281,7 @@
 //		return 0;
 TEXT runtime·cas(SB),7,$0
 	B runtime·armcas(SB)
+
+TEXT runtime·read_tls_fallback(SB),7,$-4
+	MOVW $0xffff1000, R0
+	MOVW (R0), R0
diff -r 6294f3ca30e1 src/pkg/runtime/sys_linux_arm.s
--- a/src/pkg/runtime/sys_linux_arm.s	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/pkg/runtime/sys_linux_arm.s	Tue Aug 06 12:02:10 2013 +0200
@@ -285,11 +285,11 @@
 TEXT runtime·sigtramp(SB),7,$24
 	// this might be called in external code context,
 	// where g and m are not set.
-	// first save R0, because _cgo_load_gm will clobber it
+	// first save R0, because runtime·load_gm will clobber it
 	MOVW	R0, 4(R13)
-	MOVW	_cgo_load_gm(SB), R0
+	MOVB	runtime·iscgo(SB), R0
 	CMP 	$0, R0
-	BL.NE	(R0)
+	BL.NE	runtime·load_gm(SB)
 
 	CMP 	$0, m
 	BNE 	4(PC)
@@ -440,3 +440,8 @@
 	MOVW	$SYS_fcntl, R7
 	SWI $0
 	RET
+
+// b __kuser_get_tls @ 0xffff0fe0
+TEXT runtime·read_tls_fallback(SB),7,$-4
+	MOVW	$0xffff0fe0, R0
+	B	(R0)
diff -r 6294f3ca30e1 src/pkg/runtime/sys_netbsd_arm.s
--- a/src/pkg/runtime/sys_netbsd_arm.s	Tue Aug 06 16:48:19 2013 +1000
+++ b/src/pkg/runtime/sys_netbsd_arm.s	Tue Aug 06 12:02:10 2013 +0200
@@ -300,3 +300,9 @@
 //		return 0;
 TEXT runtime·cas(SB),7,$0
 	B runtime·armcas(SB)
+
+TEXT runtime·read_tls_fallback(SB),7,$-4
+	MOVM.WP [R1, R2, R3, R12], (R13)
+	SWI $0x00a0013c // _lwp_getprivate
+	MOVM.IAW    (R13), [R1, R2, R3, R12]
+	RET
